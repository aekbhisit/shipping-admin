<?php

namespace Modules\Audit\Services;

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Collection;
use Modules\Audit\Entities\ComplianceReport;
use Carbon\Carbon;

class ComplianceService
{
    /**
     * Get compliance reports with filtering
     */
    public function getComplianceReports(array $filters = [], int $perPage = 20)
    {
        $query = ComplianceReport::with(['user', 'branch']);

        // Apply filters
        if (isset($filters['date_from'])) {
            $query->where('created_at', '>=', $filters['date_from']);
        }

        if (isset($filters['date_to'])) {
            $query->where('created_at', '<=', $filters['date_to']);
        }

        if (isset($filters['report_type'])) {
            $query->where('report_type', $filters['report_type']);
        }

        if (isset($filters['status'])) {
            $query->where('status', $filters['status']);
        }

        if (isset($filters['generated_by'])) {
            $query->where('generated_by', $filters['generated_by']);
        }

        return $query->orderBy('created_at', 'desc')->paginate($perPage);
    }

    /**
     * Generate compliance report
     */
    public function generateReport(array $data)
    {
        $report = new ComplianceReport();
        $report->report_type = $data['report_type'];
        $report->period = $data['start_date'] . ' to ' . $data['end_date'];
        $report->status = 'processing';
        $report->generated_by = $data['generated_by'];
        $report->branch_id = $data['branch_id'];
        $report->format = $data['format'] ?? 'pdf';
        $report->save();

        // Simulate report generation
        $report->status = 'completed';
        $report->file_path = 'reports/compliance_' . $report->id . '.' . $report->format;
        $report->file_size = rand(1000, 50000);
        $report->summary = [
            'total_records' => rand(100, 1000),
            'compliance_score' => rand(85, 100),
            'issues_found' => rand(0, 10)
        ];
        $report->metadata = [
            'generation_time' => rand(5, 30),
            'data_sources' => ['audit_logs', 'user_activities'],
            'filters_applied' => $data
        ];
        $report->save();

        return $report;
    }

    /**
     * Create compliance report
     */
    public function createReport(array $data)
    {
        $report = new ComplianceReport();
        $report->report_type = $data['report_type'];
        $report->period = $data['period'];
        $report->description = $data['description'] ?? '';
        $report->status = 'completed';
        $report->generated_by = $data['generated_by'];
        $report->branch_id = $data['branch_id'];

        if (isset($data['file'])) {
            $path = $data['file']->store('reports');
            $report->file_path = $path;
            $report->file_size = $data['file']->getSize();
        }

        $report->save();

        return $report;
    }

    /**
     * Delete compliance report
     */
    public function deleteReport(ComplianceReport $report)
    {
        // Delete file if exists
        if ($report->file_path && file_exists(storage_path('app/' . $report->file_path))) {
            unlink(storage_path('app/' . $report->file_path));
        }

        return $report->delete();
    }

    /**
     * Export reports list
     */
    public function exportReportsList(array $filters = [], string $format = 'csv')
    {
        $reports = $this->getComplianceReports($filters, 1000); // Get more records for export

        $data = [];
        foreach ($reports as $report) {
            $data[] = [
                'ID' => $report->id,
                'Report Type' => $report->report_type,
                'Period' => $report->period,
                'Status' => $report->status,
                'Generated By' => $report->generated_by,
                'Created At' => $report->created_at->format('Y-m-d H:i:s')
            ];
        }

        return $this->generateExport($data, $format, 'compliance_reports');
    }

    /**
     * Get compliance statistics
     */
    public function getComplianceStatistics(string $period = 'month')
    {
        $startDate = $this->getStartDate($period);

        $stats = ComplianceReport::where('created_at', '>=', $startDate)
            ->selectRaw('
                COUNT(*) as total_reports,
                COUNT(DISTINCT generated_by) as unique_generators,
                COUNT(DISTINCT DATE(created_at)) as active_days
            ')
            ->first();

        $typeStats = ComplianceReport::where('created_at', '>=', $startDate)
            ->selectRaw('report_type, COUNT(*) as count')
            ->groupBy('report_type')
            ->orderBy('count', 'desc')
            ->get();

        $statusStats = ComplianceReport::where('created_at', '>=', $startDate)
            ->selectRaw('status, COUNT(*) as count')
            ->groupBy('status')
            ->orderBy('count', 'desc')
            ->get();

        return [
            'total_reports' => $stats->total_reports ?? 0,
            'unique_generators' => $stats->unique_generators ?? 0,
            'active_days' => $stats->active_days ?? 0,
            'type_stats' => $typeStats,
            'status_stats' => $statusStats
        ];
    }

    /**
     * Get dashboard statistics
     */
    public function getDashboardStats()
    {
        $totalReports = ComplianceReport::count();
        $thisMonth = ComplianceReport::where('created_at', '>=', Carbon::now()->startOfMonth())->count();
        $pendingReports = ComplianceReport::where('status', 'processing')->count();
        $completedReports = ComplianceReport::where('status', 'completed')->count();

        return [
            'total_reports' => $totalReports,
            'this_month' => $thisMonth,
            'pending_reports' => $pendingReports,
            'completed_reports' => $completedReports
        ];
    }

    /**
     * Get report type statistics
     */
    public function getReportTypeStats()
    {
        return ComplianceReport::selectRaw('report_type, COUNT(*) as count')
            ->groupBy('report_type')
            ->pluck('count', 'report_type')
            ->toArray();
    }

    /**
     * Get monthly statistics
     */
    public function getMonthlyStats()
    {
        $stats = [];
        for ($i = 11; $i >= 0; $i--) {
            $date = Carbon::now()->subMonths($i);
            $count = ComplianceReport::whereYear('created_at', $date->year)
                ->whereMonth('created_at', $date->month)
                ->count();
            $stats[$date->format('M Y')] = $count;
        }

        return $stats;
    }

    /**
     * Get report types for filter dropdown
     */
    public function getReportTypes()
    {
        return [
            'monthly' => 'Monthly Compliance Report',
            'quarterly' => 'Quarterly Compliance Report',
            'annual' => 'Annual Compliance Report',
            'audit' => 'Audit Trail Report',
            'user_activity' => 'User Activity Report'
        ];
    }

    /**
     * Get statuses for filter dropdown
     */
    public function getStatuses()
    {
        return [
            'processing' => 'Processing',
            'completed' => 'Completed',
            'failed' => 'Failed'
        ];
    }

    /**
     * Get users list for filter dropdown
     */
    public function getUsersList()
    {
        return ComplianceReport::select('generated_by')
            ->whereNotNull('generated_by')
            ->distinct()
            ->pluck('generated_by')
            ->toArray();
    }

    /**
     * Get branches list for filter dropdown
     */
    public function getBranchesList()
    {
        return ComplianceReport::select('branch_id')
            ->whereNotNull('branch_id')
            ->distinct()
            ->pluck('branch_id')
            ->toArray();
    }

    /**
     * Get start date based on period
     */
    private function getStartDate(string $period): Carbon
    {
        return match($period) {
            'week' => Carbon::now()->subWeek(),
            'month' => Carbon::now()->subMonth(),
            'quarter' => Carbon::now()->subQuarter(),
            'year' => Carbon::now()->subYear(),
            default => Carbon::now()->subMonth()
        };
    }

    /**
     * Generate export file
     */
    private function generateExport(array $data, string $format, string $filename)
    {
        $filename = $filename . '_' . date('Y-m-d_H-i-s') . '.' . $format;
        
        // For now, return a simple CSV
        if ($format === 'csv') {
            $csv = '';
            if (!empty($data)) {
                $csv .= implode(',', array_keys($data[0])) . "\n";
                foreach ($data as $row) {
                    $csv .= implode(',', array_values($row)) . "\n";
                }
            }
            return $csv;
        }

        return $data;
    }
} 